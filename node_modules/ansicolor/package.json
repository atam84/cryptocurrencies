{
  "_from": "ansicolor",
  "_id": "ansicolor@1.1.71",
  "_inBundle": false,
  "_integrity": "sha1-OLv5fbKC7bFGLcsjQAESQHqUhuM=",
  "_location": "/ansicolor",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "ansicolor",
    "fetchSpec": "latest",
    "name": "ansicolor",
    "raw": "ansicolor",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/",
    "/ololog"
  ],
  "_resolved": "https://registry.npmjs.org/ansicolor/-/ansicolor-1.1.71.tgz",
  "_shasum": "38bbf97db282edb1462dcb23400112407a9486e3",
  "_shrinkwrap": null,
  "_spec": "ansicolor",
  "_where": "C:\\Virtualenv\\nodejs\\crypto\\crypto-collector",
  "author": {
    "email": "rocket.mind@gmail.com",
    "name": "Vitaly Gordon"
  },
  "bugs": {
    "url": "https://github.com/xpl/ansicolor/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "A JavaScript ANSI color/style management. ANSI parsing. ANSI to CSS. Small, clean, no dependencies.",
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-plugin-transform-es2015-destructuring": "^6.23.0",
    "babel-plugin-transform-es2015-parameters": "^6.24.1",
    "babel-plugin-transform-es2015-spread": "^6.22.0",
    "coveralls": "^2.13.3",
    "eslint": "^4.8.0",
    "istanbul": "^0.4.5",
    "mocha": "^3.5.3",
    "nyc": "^11.2.1"
  },
  "homepage": "https://xpl.github.io/ansicolor",
  "keywords": [
    "ANSI",
    "ansi color",
    "ansi coloring",
    "ansi console",
    "ansi for web",
    "ansi parser",
    "ansi styles",
    "ansi to css",
    "ansi to html",
    "ansi-color",
    "ansicolor",
    "background",
    "blue",
    "bright",
    "chrome",
    "chrome devtools",
    "cli",
    "code",
    "codes",
    "color",
    "color helper",
    "color logging",
    "color output",
    "colored log",
    "colored logging",
    "colored strings",
    "colorize",
    "colors",
    "command line",
    "command-line",
    "console",
    "console colors",
    "console.log",
    "control",
    "css ansi",
    "cyan",
    "developer tools",
    "devtools",
    "dim",
    "escape",
    "escapes",
    "formatting",
    "green",
    "log",
    "log colors",
    "log with colors",
    "logging",
    "magenta",
    "parse ansi",
    "rainbow",
    "red",
    "sequence",
    "shell",
    "strip ansi codes",
    "terminal colors",
    "terminal colors emulation",
    "text",
    "tty",
    "tty colors",
    "web ansi",
    "web inspector",
    "yellow"
  ],
  "license": "Unlicense",
  "main": "./build/ansicolor.js",
  "name": "ansicolor",
  "optionalDependencies": {},
  "readme": "# ansicolor\n\n[![Build Status](https://travis-ci.org/xpl/ansicolor.svg?branch=master)](https://travis-ci.org/xpl/ansicolor) [![Coverage Status](https://coveralls.io/repos/github/xpl/ansicolor/badge.svg)](https://coveralls.io/github/xpl/ansicolor) [![npm](https://img.shields.io/npm/v/ansicolor.svg)](https://npmjs.com/package/ansicolor) [![dependencies Status](https://david-dm.org/xpl/ansicolor/status.svg)](https://david-dm.org/xpl/ansicolor) [![devDependencies Status](https://david-dm.org/xpl/ansicolor/dev-status.svg)](https://david-dm.org/xpl/ansicolor?type=dev)\n\nA JavaScript ANSI color/style management. ANSI parsing. ANSI to CSS. Small, clean, no dependencies.\n\n```bash\nnpm install ansicolor\n```\n\n## What For\n\n- String coloring with ANSI escape codes\n- Solves the [style hierarchy problem](#why-another-one) (when other similar tools fail)\n- Parsing/removing ANSI style data from strings\n- Converting ANSI styles to CSS or a Chrome DevTools-compatible output\n- A middleware for your [platform-agnostic logging system](https://github.com/xpl/ololog)\n\n## Why Another One?\n\nOther tools lack consistency, failing to solve a simple hierarchy problem:\n\n```javascript\nrequire ('colors') // a popular color utility\n\nconsole.log (('foo'.cyan + 'bar').red)\n```\n\n![pic](http://cdn.jpg.wtf/futurico/85/9b/1470626860-859b24350e22df74fd7497e9dc0d8d42.png)\n\nWTF?! The `bar` word above should be rendered in red, but it's not! That sucks. It's because ANSI codes are linear, not hierarchical (as with XML/HTML). A special kind of magic is needed to make this work. **Ansicolor** does that magic for you:\n\n```javascript\nrequire ('ansicolor').nice // .nice for unsafe String extensions\n\nconsole.log (('foo'.cyan + 'bar').red)\n```\n\n![pic](http://cdn.jpg.wtf/futurico/3c/61/1470626989-3c61b64d0690b0b413be367841650426.png)\n\nNice!\n\n## Crash Course\n\n### Safe Mode (default)\n\n```javascript\nansi = require ('ansicolor')\n```\n```javascript\nconsole.log ('foo' + ansi.green (ansi.inverse (ansi.bgLightCyan ('bar')) + 'baz') + 'qux')\n```\n```javascript\nconsole.log (ansi.underline.bright.green ('foo' + ansi.dim.red.bgLightCyan ('bar'))) // method chaining\n```\n\n### Nice Mode (by request)\n\n```javascript\nansi = require ('ansicolor').nice\n```\n\nThe `('ansicolor').nice` export defines styling APIs on the `String` prototype directly. It uses an ad-hoc DSL (sort of) for infix-style string coloring. The `nice` is convenient, but not safe, avoid using it in public modules, as it may alter global objects causing potential hard-to-debug compatibility issues.\n\n```javascript\nconsole.log ('foo'.red.bright + 'bar'.bgYellow.underline.dim)\n```\n\n### Supported Styles\n\n```javascript\n'foreground colors'\n    .red.green.yellow.blue.magenta.cyan.white.darkGray.black\n```\n```javascript\n'light foreground colors'\n    .lightRed.lightGreen.lightYellow.lightBlue.lightMagenta.lightCyan.lightGray\n```\n```javascript\n'background colors'\n    .bgRed.bgGreen.bgYellow.bgBlue.bgMagenta.bgCyan.bgWhite.bgDarkGray.bgBlack\n```\n```javascript\n'light background colors'\n    .bgLightRed.bgLightGreen.bgLightYellow.bgLightBlue.bgLightMagenta.bgLightCyan.bgLightGray\n```\n```javascript\n'styles'\n    .bright.dim.italic.underline.inverse // your platform should support italic\n```\n\nYou also can obtain all those style names (for reflection purposes):\n\n```javascript\nansi.names // ['red', 'green', ...\n```\n\n## Removing ANSI Styles From Strings\n\n```javascript\nansi.strip ('\\u001b[0m\\u001b[4m\\u001b[42m\\u001b[31mfoo\\u001b[39m\\u001b[49m\\u001b[24mfoo\\u001b[0m')) // 'foofoo'\n```\n\n## Converting to CSS/HTML\n\nInspection of ANSI styles in arbitrary strings is essential when implementing platform-agnostic logging — that piece of code is available under command line interface and in a browser as well. Here's an example of how you would parse a colored string into an array-like structure. That structure can be traversed later to build HTML/JSON/XML or any other markup/syntax.\n\n```javascript\nconst parsed = ansi.parse ('foo'.bgLightRed.bright.italic + 'bar'.red.dim)\n```\n\nThe `ansi.parse ()` method will return a pseudo-array of styled spans, you can iterate over it with a `for ... of` loop and convert it to an array with the *spread operator* (`...`). Also, there's the `.spans` property for obtaining the already-spread array directly:\n\n```javascript\nassert.deepEqual (parsed.spans /* or [...parsed] */,\n\n    [ { css: 'font-weight: bold;font-style: italic;background:rgba(255,51,0,1);',\n        italic: true,\n        bold: true,\n        color: { bright: true },\n        bgColor: { name: 'lightRed' },\n        text: 'foo' },\n\n      { css: 'color:rgba(204,0,0,0.5);',\n        color: { name: 'red', dim: true },\n        text: 'bar' } ])\n```\n\n### Custom Color Themes\n\nYou can change default RGB values (won't work in terminals, affects only the ANSI→CSS transformation part):\n\n```javascript\nansi.rgb = {\n\n    black:        [0,     0,   0],    \n    darkGray:     [100, 100, 100],\n    lightGray:    [200, 200, 200],\n    white:        [255, 255, 255],\n\n    red:          [204,   0,   0],\n    lightRed:     [255,  51,   0],\n    \n    green:        [0,   204,   0],\n    lightGreen:   [51,  204,  51],\n    \n    yellow:       [204, 102,   0],\n    lightYellow:  [255, 153,  51],\n    \n    blue:         [0,     0, 255],\n    lightBlue:    [26,  140, 255],\n    \n    magenta:      [204,   0, 204],\n    lightMagenta: [255,   0, 255],\n    \n    cyan:         [0,   153, 255],\n    lightCyan:    [0,   204, 255],\n}\n```\n\n## Chrome DevTools Compatibility\n\nWeb browsers usually implement their own proprietary CSS-based color formats for `console.log` and most of them fail to display standard ANSI colors. _Ansicolor_ offers you a helper method to convert ANSI-styled strings to browser-compatible argument lists acceptable by Chrome's `console.log`:\n\n```javascript\nconst string = 'foo' + ('bar'.red.underline.bright.inverse + 'baz').bgGreen\nconst parsed = ansi.parse (string)\n\nconsole.log (...parsed.asChromeConsoleLogArguments) // prints with colors in Chrome!\n```\n\nHere's what the format looks like:\n\n```javascript\nparsed.asChromeConsoleLogArguments // [ \"%cfoo%cbar%cbaz\",\n                                   //   \"\",\n                                   //   \"font-weight: bold;text-decoration: underline;background:rgba(255,51,0,1);color:rgba(0,204,0,1);\",\n                                   //   \"background:rgba(0,204,0,1);\"\n                                   // ]\n```\n\nPlay with this feature online: [demo page](https://xpl.github.io/ololog/). Open the DevTools console and type expressions in the input box to see colored console output.\n\nHappy logging!\n\n## See Also\n\n- [Ololog!](https://github.com/xpl/ololog)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/xpl/ansicolor.git"
  },
  "scripts": {
    "autotest": "mocha --reporter spec --watch",
    "babel": "babel ansicolor.js --source-maps inline --out-file ./build/ansicolor.js",
    "build": "npm run lint && npm run lint-test && npm run babel",
    "coveralls": "nyc report --reporter=text-lcov | coveralls",
    "lint": "eslint ansicolor.js",
    "lint-test": "eslint test.js",
    "test": "npm run build && nyc --reporter=html --reporter=text mocha --reporter spec"
  },
  "version": "1.1.71"
}
