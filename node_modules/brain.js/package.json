{
  "_from": "brain.js@^1.0.0-rc.3",
  "_id": "brain.js@1.0.0-rc.3",
  "_inBundle": false,
  "_integrity": "sha1-zCBwzCrhujuxXTpNhZo9xx1Fb4g=",
  "_location": "/brain.js",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "brain.js",
    "fetchSpec": "^1.0.0-rc.3",
    "name": "brain.js",
    "raw": "brain.js@^1.0.0-rc.3",
    "rawSpec": "^1.0.0-rc.3",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/brain.js/-/brain.js-1.0.0-rc.3.tgz",
  "_shasum": "cc2070cc2ae1ba3bb15d3a4d859a3dc71d456f88",
  "_shrinkwrap": null,
  "_spec": "brain.js@^1.0.0-rc.3",
  "_where": "C:\\Virtualenv\\nodejs\\crypto\\crypto-collector",
  "author": {
    "email": "fayearthur@gmail.com",
    "name": "Heather Arthur"
  },
  "bugs": {
    "url": "https://github.com/harthur-org/brain.js/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Neural network library",
  "devDependencies": {
    "babel-cli": "^6.18.0",
    "babel-core": "^6.14.0",
    "babel-plugin-transform-object-rest-spread": "^6.8.0",
    "babel-polyfill": "^6.13.0",
    "babel-preset-es2015": "^6.14.0",
    "browserify": "^13.1.0",
    "licensify": "^3.1.2",
    "mocha": "^3.0.2",
    "sinon": "^1.17.6",
    "uglifyify": "^3.0.2"
  },
  "directories": {
    "test": "test"
  },
  "homepage": "https://github.com/harthur-org/brain.js#readme",
  "keywords": [
    "ai",
    "artificial-intelligence",
    "brain",
    "brain.js",
    "brainjs",
    "classifier",
    "feed forward",
    "gated recurrent unit",
    "gru",
    "long short term memory",
    "lstm",
    "machine-learning",
    "network",
    "neural",
    "neural network",
    "neural-networks",
    "recurrent",
    "rnn",
    "synapse"
  ],
  "license": "MIT",
  "main": "./index.js",
  "name": "brain.js",
  "optionalDependencies": {},
  "readme": "![](logo.png)\n\n# brain\n\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/harthur/brain?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n`brain.js` is a library of JavaScript [neural networks](http://en.wikipedia.org/wiki/Artificial_neural_network).\n\n:bulb: **Note**: This is a continuation of the [**harthur/brain**](https://github.com/harthur/brain) repository (which is not maintained anymore). For more details, check out [this issue](https://github.com/harthur/brain/issues/72).\n\nHere's an example of using it to approximate the XOR function:\n\n```javascript\n//create a simple feed forward neural network with backpropagation\nvar net = new brain.NeuralNetwork();\n\nnet.train([{input: [0, 0], output: [0]},\n           {input: [0, 1], output: [1]},\n           {input: [1, 0], output: [1]},\n           {input: [1, 1], output: [0]}]);\n\nvar output = net.run([1, 0]);  // [0.987]\n```\nor\n```javascript\n//create a simple recurrent neural network\nvar net = new brain.recurrent.RNN();\n\nnet.train([{input: [0, 0], output: [0]},\n           {input: [0, 1], output: [1]},\n           {input: [1, 0], output: [1]},\n           {input: [1, 1], output: [0]}]);\n\nvar output = net.run([0, 0]);  // [0]\noutput = net.run([0, 1]);  // [1]\noutput = net.run([1, 0]);  // [1]\noutput = net.run([1, 1]);  // [0]\n```\n\nThere's no reason to use a neural network to figure out XOR however (-: so here's a more involved, realistic example:\n[Demo: training a neural network to recognize color contrast](http://harthur-org.github.io/brain.js/)\n\n## Using in node\nIf you have [node](http://nodejs.org/) you can install with [npm](http://npmjs.org):\n\n```\nnpm install brain.js\n```\nAlternatively, you can install with [bower](https://bower.io/)):\n```\nbower install brain.js\n```\nAt present NPM brain.js version is approximately 1.0.0, featuring only Feed Forward NN. All other models are beta and soon be jazzed up and battle hardened.\nYou can still download the latest. They are cool!\n\n## Using in the browser\nDownload the latest [brain.js for browser](https://raw.githubusercontent.com/harthur-org/brain.js/master/browser.js). Training is computationally expensive, so you should try to train the network offline (or on a Worker) and use the `toFunction()` or `toJSON()` options to plug the pre-trained network in to your website.\n\n## Training\nUse `train()` to train the network with an array of training data. The network has to be trained with all the data in bulk in one call to `train()`. The more training patterns, the longer it will probably take to train, but the better the network will be at classifiying new patterns.\n\n#### Data format\nEach training pattern should have an `input` and an `output`, both of which can be either an array of numbers from `0` to `1` or a hash of numbers from `0` to `1`. For the [color contrast demo](http://harthur-org.github.io/brain.js/) it looks something like this:\n\n```javascript\nvar net = new brain.NeuralNetwork();\n\nnet.train([{input: { r: 0.03, g: 0.7, b: 0.5 }, output: { black: 1 }},\n           {input: { r: 0.16, g: 0.09, b: 0.2 }, output: { white: 1 }},\n           {input: { r: 0.5, g: 0.5, b: 1.0 }, output: { white: 1 }}]);\n\nvar output = net.run({ r: 1, g: 0.4, b: 0 });  // { white: 0.99, black: 0.002 }\n```\nAnother variation of the example above. Note that input objects do not need to be similar.\n```javascript\nnet.train([{input: { r: 0.03, g: 0.7 }, output: { black: 1 }},\n           {input: { r: 0.16, b: 0.2 }, output: { white: 1 }},\n           {input: { r: 0.5, g: 0.5, b: 1.0 }, output: { white: 1 }}]);\n\nvar output = net.run({ r: 1, g: 0.4, b: 0 });  // { white: 0.81, black: 0.18 }\n```\n\n\n#### Options\n`train()` takes a hash of options as its second argument:\n\n```javascript\nnet.train(data, {\n  errorThresh: 0.005,  // error threshold to reach\n  iterations: 20000,   // maximum training iterations\n  log: true,           // console.log() progress periodically\n  logPeriod: 10,       // number of iterations between logging\n  learningRate: 0.3    // learning rate\n});\n```\n\nThe network will train until the training error has gone below the threshold (default `0.005`) or the max number of iterations (default `20000`) has been reached, whichever comes first.\n\nBy default training won't let you know how its doing until the end, but set `log` to `true` to get periodic updates on the current training error of the network. The training error should decrease every time. The updates will be printed to console. If you set `log` to a function, this function will be called with the updates instead of printing to the console.\n\nThe learning rate is a parameter that influences how quickly the network trains. It's a number from `0` to `1`. If the learning rate is close to `0` it will take longer to train. If the learning rate is closer to `1` it will train faster but it's in danger of training to a local minimum and performing badly on new data. The default learning rate is `0.3`.\n\n#### Methods\n##### `train`\nThe output of `train()` is a hash of information about how the training went:\n\n```javascript\n{\n  error: 0.0039139985510105032,  // training error\n  iterations: 406                // training iterations\n}\n```\n\n#### Failing\nIf the network failed to train, the error will be above the error threshold. This could happen because the training data is too noisy (most likely), the network doesn't have enough hidden layers or nodes to handle the complexity of the data, or it hasn't trained for enough iterations.\n\nIf the training error is still something huge like `0.4` after 20000 iterations, it's a good sign that the network can't make sense of the data you're giving it.\n\n## JSON\nSerialize or load in the state of a trained network with JSON:\n\n```javascript\nvar json = net.toJSON();\nnet.fromJSON(json);\n```\n\nYou can also get a custom standalone function from a trained network that acts just like `run()`:\n\n```javascript\nvar run = net.toFunction();\nvar output = run({ r: 1, g: 0.4, b: 0 });\nconsole.log(run.toString()); // copy and paste! no need to import brain.js\n```\n\n## Options\n`NeuralNetwork()` takes a hash of options:\n\n```javascript\nvar net = new brain.NeuralNetwork({\n  hiddenLayers: [4],\n  learningRate: 0.6 // global learning rate, useful when training using streams\n});\n```\n\n#### hiddenLayers\nSpecify the number of hidden layers in the network and the size of each layer. For example, if you want two hidden layers - the first with 3 nodes and the second with 4 nodes, you'd give:\n\n```\nhiddenLayers: [3, 4]\n```\n\nBy default `brain.js` uses one hidden layer with size proportionate to the size of the input array.\n\n## Streams\nThe network now has a [WriteStream](http://nodejs.org/api/stream.html#stream_class_stream_writable). You can train the network by using `pipe()` to send the training data to the network.\n\n#### Example\nRefer to `stream-example.js` for an example on how to train the network with a stream.\n\n#### Initialization\nTo train the network using a stream you must first create the stream by calling `net.createTrainStream()` which takes the following options:\n\n* `floodCallback()` - the callback function to re-populate the stream. This gets called on every training iteration.\n* `doneTrainingCallback(info)` - the callback function to execute when the network is done training. The `info` param will contain a hash of information about how the training went:\n\n```javascript\n{\n  error: 0.0039139985510105032,  // training error\n  iterations: 406                // training iterations\n}\n```\n\n#### Transform\nUse a [Transform](http://nodejs.org/api/stream.html#stream_class_stream_transform) to coerce the data into the correct format. You might also use a Transform stream to normalize your data on the fly.\n\n## Utilities\n### `likely`\n```js\nvar likely = require('brain/likely');\nvar key = likely(input, net);\n```\nSee: https://github.com/harthur-org/brain.js/blob/master/test/base/likely.js\n\n## Neural Network Types\n* [`brain.NeuralNetwork`](src/neural-network.js) - [Feedforward Neural Network](https://en.wikipedia.org/wiki/Feedforward_neural_network) with backpropagation\n* [`brain.recurrent.RNN`](src/recurrent/rnn.js) - [Recurrent Neural Network or \"RNN\"](https://en.wikipedia.org/wiki/Recurrent_neural_network)\n* [`brain.recurrent.LSTM`](src/recurrent/lstm.js) - [Long Short Term Memory Neural Network or \"LSTM\"](https://en.wikipedia.org/wiki/Long_short-term_memory)\n* [`brain.recurrent.GRU`](src/recurrent/gru.js) - [Gated Recurrent Unit or \"GRU\"](https://en.wikipedia.org/wiki/Gated_recurrent_unit)\n\n### Why different Neural Network Types?\nDifferent neural nets do different things well.  For example:\n* A Feedforward Neural Network can classify simple things very well, but it has no memory of previous actions and has infinite variation of results.\n* A Recurrent Neural Network _remembers_, and has a finite set of results.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/harthur-org/brain.js.git"
  },
  "scripts": {
    "browser": "browserify ./index.js -p licensify -o browser.js",
    "browser-min": "browserify ./index.js -p licensify -g uglifyify -o browser.min.js",
    "dist": "babel src --out-dir dist --source-maps",
    "make": "rm -fr ./dist && npm run dist && git add ./dist && npm run browser && npm run browser-min",
    "test": "npm run test-base && npm run test-recurrent && npm run test-utilities",
    "test-base": "find ./test/base/ -name '*.js' | xargs mocha --compilers js:babel-core/register",
    "test-gru": "find ./test/recurrent/ -name 'gru.js' | xargs mocha --compilers js:babel-core/register",
    "test-lstm": "find ./test/recurrent/ -name 'lstm.js' | xargs mocha --compilers js:babel-core/register",
    "test-recurrent": "find ./test/recurrent/ -name '*.js' | xargs mocha --compilers js:babel-core/register",
    "test-rnn": "find ./test/recurrent/ -name 'rnn.js' | xargs mocha --compilers js:babel-core/register",
    "test-utilities": "find ./test/utilities/ -name '*.js' | xargs mocha --compilers js:babel-core/register"
  },
  "version": "1.0.0-rc.3"
}
