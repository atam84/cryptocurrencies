{
  "_from": "ololog",
  "_id": "ololog@1.0.62",
  "_inBundle": false,
  "_integrity": "sha1-BQQXSq+O32tXxe4gWbkQx+/TEos=",
  "_location": "/ololog",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "ololog",
    "fetchSpec": "latest",
    "name": "ololog",
    "raw": "ololog",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/ololog/-/ololog-1.0.62.tgz",
  "_shasum": "0504174aaf8edf6b57c5ee2059b910c7efd3128b",
  "_shrinkwrap": null,
  "_spec": "ololog",
  "_where": "C:\\Virtualenv\\nodejs\\crypto\\crypto-collector",
  "author": {
    "email": "rocket.mind@gmail.com",
    "name": "Vitaly Gordon"
  },
  "bugs": {
    "url": "https://github.com/xpl/ololog/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "ansicolor": "^1.1.70",
    "pipez": "^1.1.7",
    "printable-characters": "^1.0.33",
    "stacktracey": "^1.0.60",
    "string.bullet": "^1.0.11",
    "string.ify": "^1.0.43"
  },
  "deprecated": false,
  "description": "Platform-agnostic logging / colors / terminals & browsers / shows call locations / pretty prints objects and Errors / smart whitespace handling",
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-plugin-transform-es2017-object-entries": "0.0.4",
    "babel-preset-env": "^1.6.0",
    "browserify": "^14.4.0",
    "chai": "^3.5.0",
    "coveralls": "^2.13.1",
    "eslint": "^4.7.2",
    "istanbul": "^0.4.5",
    "mocha": "^3.5.3",
    "nyc": "^11.2.1"
  },
  "homepage": "https://github.com/xpl/ololog",
  "keywords": [
    "ANSI",
    "Error.stack print",
    "ansi color",
    "ansi coloring",
    "ansi console",
    "ansi for web",
    "ansi styles",
    "ansi-color",
    "ansicolor",
    "background",
    "blue",
    "bright",
    "call stack",
    "call stack printing",
    "callstack",
    "chrome",
    "chrome devtools",
    "chrome devtools",
    "cli",
    "code",
    "codes",
    "color",
    "color helper",
    "color logging",
    "color output",
    "colored log",
    "colored logging",
    "colored strings",
    "colorize",
    "colors",
    "command line",
    "console",
    "console colors",
    "console log",
    "console.log",
    "console.log",
    "control",
    "css ansi",
    "cyan",
    "debug",
    "debugger",
    "debugging tool",
    "developer tools",
    "devtools",
    "devtools",
    "dim",
    "error",
    "error printer",
    "error stack print",
    "escape",
    "escapes",
    "format object",
    "formatting",
    "green",
    "log",
    "log",
    "log colors",
    "log with colors",
    "logging",
    "logging",
    "magenta",
    "object printer",
    "pretty",
    "pretty print",
    "print",
    "print callstack",
    "print object",
    "print stack",
    "print stack trace",
    "print stacktrace",
    "rainbow",
    "red",
    "sequence",
    "shell",
    "stack",
    "stack",
    "stack printer",
    "stack printing",
    "stacktrace",
    "stringify",
    "terminal colors",
    "terminal colors emulation",
    "text",
    "tty",
    "tty",
    "tty colors",
    "web ansi",
    "web inspector",
    "yellow"
  ],
  "license": "Unlicense",
  "main": "build/ololog.js",
  "name": "ololog",
  "optionalDependencies": {},
  "readme": "# Ololog!\n\n[![Build Status](https://travis-ci.org/xpl/ololog.svg?branch=master)](https://travis-ci.org/xpl/ololog) [![NPM](https://img.shields.io/npm/v/ololog.svg)](http://npmjs.com/package/ololog)\n\n- [x] Platform-agnostic logging\n- [x] [Colors / styles](https://github.com/xpl/ololog#ansi-styling) for terminals and Chrome DevTools (try [online demo](https://xpl.github.io/ololog/))\n- [x] [Displays call locations](https://github.com/xpl/ololog#displaying-call-location)\n- [x] [Returns its argument](https://github.com/xpl/ololog#debugging-of-functional-expressions) (for easy debugging of functional expressions)\n- [x] [Smart newline / indentation handling](https://github.com/xpl/ololog#smart-indentationnewline-handling)\n- [x] [Powerful object printer](https://github.com/xpl/ololog#smart-object-printing)\n- [x] Formats `Error` instances as [pretty stacktraces with source lines](https://github.com/xpl/ololog#pretty-printing-error-instances)\n- [x] Full sourcemap support (via [`get-source`](https://github.com/xpl/get-source))\n- [x] [Pluggable pipeline architecture](https://github.com/xpl/pipez#pipezbeta)\n- [x] [Can replace the default unhandled error printer in Node](https://github.com/xpl/ololog#using-as-the-default-exception-printer-in-node)\n- [x] [Integrates with Mocha](https://github.com/xpl/ololog#using-with-mocha) (experimental)\n\n# TODO\n\n- [ ] HTML/DOM rendering\n- [ ] Improve [tests](https://github.com/xpl/ololog/blob/master/test.js) coverage\n\n# Importing\n\nFor use with Node or with module bundlers (Browserify / WebPack / Rollup):\n\n```bash\nnpm install ololog\n```\n```javascript\nconst log = require ('ololog')\n```\n\n# Using With [Mocha](https://mochajs.org/)\n\n<img src=\"https://user-images.githubusercontent.com/1707/30816536-e504a9d6-a21e-11e7-976c-778a95d32219.png\">\n\n```bash\nmocha --reporter ololog/reporter\n```\n\n- [x] Aligns log messages nicely\n- [x] Supresses log output for nonfailed tests (disable with `.only` or `this.verbose=true` for a suite/test)\n- [x] Automatically manages empty lines / whitespace for better legibility\n- [x] Prints unhandled exceptions and promise rejections as nice stacktraces\n- [x] [Animated execution progress](https://user-images.githubusercontent.com/1707/30836580-c80ab106-a267-11e7-87d1-04513d36995b.gif)\n\n**NOTE:** It is highly experimental yet, and things may not work as expected...\n\n# Browser Bundle\n\n...for those who still uses `<script>` tag for module importing ;) Exposes the global `ololog` and [`ansicolor`](https://github.com/xpl/ansicolor) objects. Installs [String extensions for ANSI styles](https://github.com/xpl/ansicolor#nice-mode-by-request). Not compressed.\n\n```html\n<script src=\"https://unpkg.com/ololog\"></script> <!-- from unpkg.com CDN -->\n<script>\n    log = ololog\n    log ('something'.red)\n</script>\n```\n\n# Basic Usage\n\nAt first, it's similar to `console.log`:\n\n```javascript\nlog ('foo', 'bar', 'baz') // foo bar baz\n```\n\n# Configuration\n\nIt exposes a method called `.configure`, which produces a new `log` instance with the new settings applied (not mutating the original one), which can be saved and re-used subsequently:\n\n```javascript\nconst log = require ('ololog').configure ({ concat: { separator: '' }})\n```\n```javascript\nlog ('foo', 'bar', 'baz') // foobarbaz\n```\n\n...or you can apply the configuration method _ad-hoc_:\n\n```javascript\nlog.configure ({ concat: { separator: '' }}) ('foo', 'bar', 'baz') // foobarbaz\n```\n\nYou can [read more about `configure` here](https://github.com/xpl/pipez#pipezbeta). Configuration engine is implemented as a separate external library, for everyone's use. Contributions are welcome.\n\n# Debugging Of Functional Expressions\n\nOlolog returns its first argument (a feature that `console.log` doesn't have), and it greatly simplifies debugging of functional expressions, as you can simply wrap part of an expression to `log`:\n\n```javascript\narray.map (x => log (x) + 1)\n```\n\nIt is far less ugly than with `console.log`:\n\n```javascript\narray.map (x => { console.log (x); return x + 1 })\n```\n\n# ANSI Styling\n\nBacked by the [ansicolor](https://github.com/xpl/ansicolor) library, colored output is supported for the terminal environment and for the Chrome DevTools console. On other platforms, ANSI codes are safely stripped from the output, so they don't mess up anything.\n\nApply styling by calling the [`ansicolor`](https://github.com/xpl/ansicolor) methods on arbitrary strings:\n\n```javascript\nrequire ('ansicolor').nice // importing in .nice mode extends the String prototype, but there's a safe functional mode as well (see the docs...)\n\nlog (('foo'.dim.red + 'bar'.bgLightCyan).underline)\n```\n\n...or by using the built-in shorthand methods (no need to import `ansicolor`, but we lose the ability to colorize just a part of a string):\n\n```javascript\nlog.red ('red text')\nlog.bright.red.underline ('multiple styles combined')\n```\n\n[See all the supported styling options here](https://github.com/xpl/ansicolor#supported-styles).\n\n# Smart Indentation/Newline Handling\n\n```javascript\nlog.bright.magenta ('this is something:'.yellow, [ \"595da547d9b22f23d8228643\", \"595da547d9b22f23d822863f\", \"595da547d9b22f23d8228641\" ])\n```\n\n![pic](https://cdn.jpg.wtf/futurico/a3/cf/1499313101-a3cf62db303adad169816ce670f43a3b.png)\n\n...and this is how it would look without special caring:\n\n![pic](https://cdn.jpg.wtf/futurico/b1/34/1499313467-b1342c4330146675e9353eddd281006c.png)\n\n# Smart Object Printing\n\nAll magic is provided by the external [String.ify](https://github.com/xpl/string.ify) library. Read the docs to see all the available configuration options. There are plenty of them! Contributions are welcome.\n\n![GIF animation](http://cdn.jpg.wtf/futurico/13/34/1470446586-13341a275886bd6be2af39e3c24f2f31.gif)\n\nExample object:\n\n```javascript\nconst obj = { asks: [{ price: \"1000\", amount: 10 }, { price: \"2000\", amount: 10 }], bids: [{ price: \"500\", amount: 10 }, { price: \"100\", amount: 10 }] }\n```\n\nDefault output:\n\n```javascript\nlog (obj)\n```\n```\n{ asks: [ { price: \"1000\", amount: 10 },\n          { price: \"2000\", amount: 10 }  ],\n  bids: [ { price: \"500\", amount: 10 },\n          { price: \"100\", amount: 10 }  ]   }\n```\n\nLonger strings:\n\n```javascript\nlog.maxLength (70) (obj)\n```\n```\n{ asks: [{ price: \"1000\", amount: 10 }, { price: \"2000\", amount: 10 }],\n  bids: [{ price: \"500\", amount: 10 }, { price: \"100\", amount: 10 }]    }\n```\n\nShorter strings:\n\n```javascript\nlog.maxLength (20) (obj)\n```\n```\n{ asks: [ {  price: \"1000\",\n            amount:  10     },\n          {  price: \"2000\",\n            amount:  10     }  ],\n  bids: [ {  price: \"500\",\n            amount:  10    },\n          {  price: \"100\",\n            amount:  10    }  ]   }\n```\n\nDisabling fancy formatting / single line mode:\n\n```javascript\nlog.noPretty (obj)\n```\n```\n{ asks: [{ price: \"1000\", amount: 10 }, { price: \"2000\", amount: 10 }], bids: [{ price: \"500\", amount: 10 }, { price: \"100\", amount: 10 }] }\n```\n\nChanging max print depth / max array length:\n\n```javascript\nlog.maxDepth (1).maxArrayLength (100) (obj) // or log.configure ({ stringify: { maxDepth: 1, maxArrayLength: 100 } })\n```\n```javascript\nlog.unlimited (obj) // disables limiting\n```\n\nPassing other configuration options to [`string.ify`](https://github.com/xpl/string.ify): \n\n```javascript\nlog.configure ({ stringify: { precision: 2 } }) (obj) // Read the string.ify docs to see all the available configuration options. There are plenty of them!\n```\n\n# Using With Custom Stringifier\n\nReplacing the default printer with [q-i](https://github.com/sapegin/q-i) (as an example):\n\n```javascript\nconst log = require ('ololog').configure ({ stringify: { print: require ('q-i').stringify } })\n```\n```javascript\nlog ({ foo: true, bar: 42 })\n```\n\n![pic](https://user-images.githubusercontent.com/1707/30799941-222a66a8-a1e7-11e7-89b5-4bed706c7840.png)\n\n# Pretty Printing `Error` Instances\n\nThis feature is implemented in the [StackTracey](https://github.com/xpl/stacktracey#pretty-printing) library. See it's docs for more (you can configure the path shortening / library calls skipping).\n\n```javascript\nlog.bright.red (e) // where `e` is an instance of Error\n```\n\nor (if you want the output go to _stderr_ and supress the grey location badge):\n\n```javascript\nlog.bright.red.error.configure ({ locate: false }) (e)\n```\n\n<img width=\"936\" alt=\"screen shot 2017-09-27 at 13 57 24\" src=\"https://user-images.githubusercontent.com/1707/30910025-dd160de6-a38b-11e7-9297-70f139cd63b8.png\">\n\n# Using As The Default Exception Printer In Node\n\n```javascript\nconst printError = log.bright.red.error.configure ({ locate: false })\n\nprocess.on ('uncaughtException',  e => { printError (e) })\nprocess.on ('unhandledRejection', e => { printError (e) })\n```\n\n# Displaying Call Location\n\nHave you ever encountered a situation where you need to quickly find in the code the place where the logging is called, but it's not so easy to do? With call location tags it's really easy. And it's enabled by default.\n\n![log message](https://cdn.jpg.wtf/futurico/d6/dd/1493351933-d6dd0c2e633fbb2f886c25c0d8e6f6ad.png)\n\n![call](https://cdn.jpg.wtf/futurico/d6/0c/1493352126-d60cebe41bab9c3d111364ecfc9d2c65.png)\n\nDisabling:\n\n```javascript\nlog.configure ({ locate: false }) (...)\n```\n\n...or:\n\n```javascript\nlog.noLocate (...)\n````\n\nCustom printer:\n\n```javascript\nlog.configure ({ locate: { print: ({ calleeShort, fileName, line }) => ... } }) (...)\n```\n\nManually setting call location (see the [StackTracey](https://github.com/xpl/stacktracey) library, which serves the purpose):\n\n```javascript\nlog.configure ({ locate: { where: new StackTracey ().at (2) } }) (...)\n```\n\n# Indentation\n\n```javascript\nlog.configure ({ indent: { level: 3 } }) ('foo\\n', 'bar\\n', 'baz')  //          foo\n                                                                    //          bar\n                                                                    //          baz\n```\n\nShorthand method:\n\n```javascript\nlog.indent (2) ('foo\\n', 'bar\\n', 'baz')\n```\n\n# Timestamping\n\nDisabled by default. To enable:\n\n```javascript\nlog = log.configure ({ time: true })\n```\n\nWith indentation:\n\n```javascript\nlog            ('Lorem ipsum dolor sit amet\\nconsectetur adipiscing elit..\\n')\nlog.indent (2) ('Lorem ipsum dolor sit amet\\nconsectetur adipiscing elit..\\n')\n```\n\n![pic](https://cdn.jpg.wtf/futurico/b2/31/1493357342-b2313dd7e25f8606ad7637997ca05fb3.png)\n\nWith custom printer:\n\n```javascript\nlog.configure ({ time: { print: x => (String (x) + ' | ').bright.cyan }}) ('Lorem ipsum dolor sit amet\\nconsectetur adipiscing elit..')\n```\n\n![pic](https://cdn.jpg.wtf/futurico/93/45/1493357501-9345b20f7edd289e0336bc322f1e68c3.png)\n\nBackdating:\n\n```javascript\nlog.configure ({ time: { when: new Date ('2017-02-27T12:45:19.951Z') }}) (...)\n```\n\n# Specifying Additional Semantics (errors / warnings / info messages)\n\nYou can add the `.error` call modifier, which tells Ololog to render with the `console.error` instead of the `console.log`: \n\n```javascript\nlog.error ('this goes to stderr')\n```\n```javascript\nlog.bright.red.error ('bright red error!')\n```\n\nOther `console` methods are supported as well:\n\n```javascript\nlog.info ('calls console.info')\n```\n```javascript\nlog.warn ('calls console.warn')\n```\n\n# Limiting Max Argument Length\n\n```javascript\nlog.configure ({ trim: { max: 5 } }) ('1234567890', 'abcdefgh') // 1234… abcd…\n```\n\n# Getting Rendered Text\n\nThe following will execute all stages before the 'render' (screen output) stage, returning its argument:\n\n```javascript\nlog.before ('render') ({ foo: 42 }) // '{ foo: 42 }'\n```\n\n# Custom Methods\n\nYou can add your own shorthand methods/properties (will add new properties globally for any instance of the `ololog`, but this may change in future). An example, demonstrating how the actual `indent` and `red` chain-style helpers were implemented:\n\n```javascript\nlog.methods ({\n\n    indent (level) { return this.configure ({ indent: { level: level }}) }\n    get red ()     { return this.configure ({ 'concat+': lines => lines.map (ansicolor.red) }) } // executes it after the 'concat'\n})\n```\n\n# Overriding The Default Behaivor\n\nYou can also bind new code to the existing methods in an _aspect-oriented programming_ style, executing it _before_, _after_ or _instead_ – and thus overriding the default behavior. See the [pipez](https://github.com/xpl/pipez#pipez) library, which provides all the fun. For example, if you want to write `.error` calls not just on screen, but to a separate file, you can do following (by injecting a custom hook after the `render` call):\n\n```javascript\nconst ololog = require ('ololog')\n    , ansi   = require ('ansicolor')\n    , fs     = require ('fs')\n    \nconst log = require ('ololog').configure ({\n\n    'render+' (text, { consoleMethod = '' }) { // adds this method after `render`\n        if (consoleMethod === 'error') {\n            fs.appendToFile ('error.log', '\\n' + ansi.strip (text)) // strip ANSI styling codes from output\n        }\n        return text\n    }\n})\n```\n\n# Null Device\n\nUse `.null` to obtain a reduced instance that does nothing apart from returning its first argument:\n\n```javascript\nconst devNull = log.null\n```\n```javascript\ndevNull.bright.red ('this never shows') // simply returns 'this never shows'\n```\n\n# Powered By\n\n- [String.ify](https://github.com/xpl/string.ify)\n- [StackTracey](https://github.com/xpl/stacktracey)\n- [pipez](https://github.com/xpl/pipez)\n- [ansicolor](https://github.com/xpl/ansicolor)\n- [printable-characters](https://github.com/xpl/printable-characters)\n\n# See Also\n\n- [CCXT](https://github.com/ccxt-dev/ccxt) – a cryptocurrency trading library with 85+ exchanges. It uses Ololog in the tests and in the examples.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/xpl/ololog.git"
  },
  "scripts": {
    "autotest": "env OLOLOG_TEST_FILE='./ololog' mocha --reporter spec --watch",
    "babel": "babel ololog.js --source-maps inline --out-file ./build/ololog.js",
    "browserify": "browserify --debug ./ololog.browser.js > ./build/ololog.browser.js",
    "build": "npm run lint && npm run lint-test && npm run babel && npm run browserify",
    "coveralls": "nyc report --reporter=text-lcov | coveralls",
    "lint": "eslint ololog.js",
    "lint-test": "eslint test.js",
    "test": "npm run build && env OLOLOG_TEST_FILE='./build/ololog' nyc --reporter=html --reporter=text mocha --reporter spec"
  },
  "unpkg": "build/ololog.browser.js",
  "version": "1.0.62"
}
